CCS PCM C Compiler, Version 5.025, 63300               21-feb.-23 10:36

               Filename:   C:\Users\luist\OneDrive\Escritorio\8VO\MICRO\PROGRAMAS\SEMAFORO\cmaforo.lst

               ROM used:   170 words (2%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           10 (3%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   074
0003:  NOP
.................... #include <16F877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
....................  
.................... #device ADC = 10 
....................  
.................... #use delay(crystal = 20000000) 
0004:  MOVLW  24
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
.................... #FUSES NOWDT, NOBROWNOUT, NOLVP 
....................  
....................  
....................  
....................  
.................... //Directiva para utilizar puerto USART 
....................  
.................... #use rs232(BAUD=9600, XMIT = PIN_C6, RCV=PIN_C7) 
....................  
....................  
....................  
....................  
.................... #use STANDARD_IO(B) 
.................... #use STANDARD_IO(C) 
....................  
....................  
....................  
.................... #define BOTON PIN_C0 
....................  
.................... #define G PIN_B1 
....................  
.................... #define Y PIN_B2 
....................  
.................... #define R PIN_B3 
....................  
.................... void verde(int8 seg) 
.................... { 
....................    for(int8 i=0;i<seg;i++) 
0018:  CLRF   22
0019:  MOVF   21,W
001A:  SUBWF  22,W
001B:  BTFSC  03.0
001C:  GOTO   02F
....................    { 
....................       if(input(BOTON)==1)break; 
001D:  BSF    20.0
001E:  MOVF   20,W
001F:  BSF    03.5
0020:  MOVWF  07
0021:  BCF    03.5
0022:  BTFSS  07.0
0023:  GOTO   026
0024:  GOTO   02F
0025:  GOTO   02D
....................        
....................       else 
....................       { 
....................          output_high(G); 
0026:  BSF    03.5
0027:  BCF    06.1
0028:  BCF    03.5
0029:  BSF    06.1
....................          delay_ms(100); 
002A:  MOVLW  64
002B:  MOVWF  24
002C:  CALL   004
....................       } 
002D:  INCF   22,F
002E:  GOTO   019
....................    } 
....................    output_low(G); 
002F:  BSF    03.5
0030:  BCF    06.1
0031:  BCF    03.5
0032:  BCF    06.1
0033:  BCF    0A.3
0034:  BCF    0A.4
0035:  GOTO   0A2 (RETURN)
.................... } 
.................... void amarillo(int8 seg) 
.................... { 
....................        for(int8 i = 0; i < seg; i++) 
0036:  CLRF   22
0037:  MOVF   21,W
0038:  SUBWF  22,W
0039:  BTFSC  03.0
003A:  GOTO   053
....................  
....................    { 
....................  
....................       output_high(Y); 
003B:  BSF    03.5
003C:  BCF    06.2
003D:  BCF    03.5
003E:  BSF    06.2
....................       delay_ms(375); 
003F:  MOVLW  03
0040:  MOVWF  23
0041:  MOVLW  7D
0042:  MOVWF  24
0043:  CALL   004
0044:  DECFSZ 23,F
0045:  GOTO   041
....................  
....................       output_low(Y); 
0046:  BSF    03.5
0047:  BCF    06.2
0048:  BCF    03.5
0049:  BCF    06.2
....................  
....................       delay_ms(375); 
004A:  MOVLW  03
004B:  MOVWF  23
004C:  MOVLW  7D
004D:  MOVWF  24
004E:  CALL   004
004F:  DECFSZ 23,F
0050:  GOTO   04C
0051:  INCF   22,F
0052:  GOTO   037
....................  
....................    } 
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   0A5 (RETURN)
.................... } 
.................... void rojo(int8 seg) 
.................... { 
....................    for(int8 i=0;i<seg;i++) 
0056:  CLRF   22
0057:  MOVF   21,W
0058:  SUBWF  22,W
0059:  BTFSC  03.0
005A:  GOTO   06D
....................    { 
....................       if(input(BOTON)==1) 
005B:  BSF    20.0
005C:  MOVF   20,W
005D:  BSF    03.5
005E:  MOVWF  07
005F:  BCF    03.5
0060:  BTFSS  07.0
0061:  GOTO   064
....................       { 
....................          i=0; 
0062:  CLRF   22
....................       } 
0063:  GOTO   06B
....................       else 
....................       { 
....................          output_high(R); 
0064:  BSF    03.5
0065:  BCF    06.3
0066:  BCF    03.5
0067:  BSF    06.3
....................          delay_ms(100); 
0068:  MOVLW  64
0069:  MOVWF  24
006A:  CALL   004
....................       } 
006B:  INCF   22,F
006C:  GOTO   057
....................    } 
....................    output_low(R); 
006D:  BSF    03.5
006E:  BCF    06.3
006F:  BCF    03.5
0070:  BCF    06.3
0071:  BCF    0A.3
0072:  BCF    0A.4
0073:  GOTO   0A8 (RETURN)
.................... } 
....................  
....................  
.................... void main() 
0074:  MOVF   03,W
0075:  ANDLW  1F
0076:  MOVWF  03
0077:  MOVLW  81
0078:  BSF    03.5
0079:  MOVWF  19
007A:  MOVLW  A6
007B:  MOVWF  18
007C:  MOVLW  90
007D:  BCF    03.5
007E:  MOVWF  18
007F:  MOVLW  FF
0080:  MOVWF  20
0081:  BSF    03.5
0082:  BSF    1F.0
0083:  BSF    1F.1
0084:  BSF    1F.2
0085:  BCF    1F.3
0086:  MOVLW  07
0087:  MOVWF  1C
0088:  BCF    03.7
....................  
.................... { 
....................  
....................    setup_uart(9600); //Configurar baudios 
0089:  MOVLW  81
008A:  MOVWF  19
008B:  MOVLW  A6
008C:  MOVWF  18
008D:  MOVLW  90
008E:  BCF    03.5
008F:  MOVWF  18
....................  
....................    // Inicializar pines 
....................    input(BOTON); 
0090:  BSF    20.0
0091:  MOVF   20,W
0092:  BSF    03.5
0093:  MOVWF  07
....................  
....................    output_low(R); 
0094:  BCF    06.3
0095:  BCF    03.5
0096:  BCF    06.3
....................  
....................    output_low(Y); 
0097:  BSF    03.5
0098:  BCF    06.2
0099:  BCF    03.5
009A:  BCF    06.2
....................  
....................    output_low(G); 
009B:  BSF    03.5
009C:  BCF    06.1
009D:  BCF    03.5
009E:  BCF    06.1
.................... while(1) 
.................... { 
....................    verde(50); 
009F:  MOVLW  32
00A0:  MOVWF  21
00A1:  GOTO   018
....................    amarillo(4); 
00A2:  MOVLW  04
00A3:  MOVWF  21
00A4:  GOTO   036
....................    rojo(80); 
00A5:  MOVLW  50
00A6:  MOVWF  21
00A7:  GOTO   056
00A8:  GOTO   09F
.................... } 
.................... } 
00A9:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
